version: '3.0'

# Not mounting these as external persistent host volumes
# as this data only needs to be ephemeral for dev purposes
volumes:
  kafka-data:
    # external: true

# Provide docker logging driver options to keep size limit on
# generated logs as Docker has no limits and will grow infinitely
x-logging: &default-logging
  driver: json-file
  options:
    max-size: '10m'
    max-file: '1'

x-moleculer-service: &moleculer-service
  build:
      context: .
  image: moleculer-microservices-spike
  logging: *default-logging
  env_file: docker-compose.env
  profiles:
    - services

services:
  api:
    <<: *moleculer-service
    depends_on:
      - redis
    environment:
      NODE_ID: 'node-api'
      SERVICES: api
      PORT: 4000
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.entrypoints=http'
      - 'traefik.http.routers.api.rule=Host(`moleculer-127-0-0-1.nip.io`)'
      - 'traefik.http.services.api.loadbalancer.server.port=4000'

  auth:
    <<: *moleculer-service
    depends_on:
      - redis
    environment:
      NODE_ID: 'node-auth'
      SERVICES: auth

  metrics:
    <<: *moleculer-service
    depends_on:
      - redis
    environment:
      NODE_ID: 'node-metrics'
      SERVICES: metrics

  users:
    <<: *moleculer-service
    depends_on:
      - redis
      - mongodb
    environment:
      NODE_ID: 'node-users'
      SERVICES: users

  inventory:
    <<: *moleculer-service
    depends_on:
      - redis
      - kafka
      - mongodb
    environment:
      NODE_ID: 'node-inventory'
      SERVICES: inventory

  orders:
    <<: *moleculer-service
    depends_on:
      - redis
      - kafka
      - mongodb
    environment:
      NODE_ID: 'node-orders'
      SERVICES: orders

  greeter:
    <<: *moleculer-service
    depends_on:
      - redis
    environment:
      NODE_ID: 'node-greeter'
      SERVICES: greeter

  slack:
    <<: *moleculer-service
    depends_on:
      - redis
      - kafka
    environment:
      NODE_ID: 'node-slack'
      SERVICES: slack

  emailer:
    <<: *moleculer-service
    depends_on:
      - redis
    environment:
      NODE_ID: 'node-emailer'
      SERVICES: emailer

  redis:
    image: redis:alpine
    logging: *default-logging
    hostname: redis
    profiles:
      - infrastructure
    ports:
      - 6379:6379

  mongodb:
    image: mongo
    logging: *default-logging
    hostname: mongo
    profiles:
      - infrastructure
    ports:
      - 27017:27017

  # The additional CONTROLLER listener and shell script in the command
  # is required so that Kafka can be run using the new KRaft protocol
  # and removing the need for running ZooKeeper.
  kafka:
    image: confluentinc/cp-kafka:6.2.0
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    logging: *default-logging
    hostname: kafka
    container_name: kafka
    profiles:
      - infrastructure
    ports:
      - 9092:9092
    volumes:
      - ./kafka/update_run.sh:/tmp/update_run.sh
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # Internal listener for communication to brokers from within the
      # Docker network, external listener for accessing from Docker host.
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_HOURS: 720
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_TOOLS_LOG4J_LOGLEVEL: INFO
      # JMX configuration for accessing metrics
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_JMX_PORT: 49999
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'INTERNAL://kafka:29092,CONTROLLER://kafka:29093,EXTERNAL://0.0.0.0:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous

  # Jaeger container used for tracing metrics.
  # https://www.jaegertracing.io/
  # Access the dashboard at http://localhost:16686
  jaeger:
    image: jaegertracing/all-in-one:latest
    logging: *default-logging
    hostname: jaeger
    profiles:
      - monitoring
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '14268:14268'
      - '9411:9411'
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411

  traefik:
    image: traefik:v2.6
    logging: *default-logging
    command:
      - --api=true
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --accesslog=true
      - --log=true
      - --log.level=info
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # This container exposes an HTTP API to display information about requests it receives.
  # nip.io is a DNS site that resolves the url to the ip address specified in the url.
  # When accessing http://whoami-127-0-0-1.nip.io this will be resolved to 127.0.0.1
  # and the Traefik service listening on port 80 on the host will receive the request.
  # Traefik will route that request to this whoami service due to the whoami-127-0-0-1.nip.io
  # host header rule.
  whoami:
    image: containous/whoami
    logging: *default-logging
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.whoami.entrypoints=http'
      - 'traefik.http.routers.whoami.rule=Host(`whoami-127-0-0-1.nip.io`)'
      - 'traefik.http.services.whoami.loadbalancer.server.port=80'
